<?php/** * User: vital rulinski * Date: 10/14/15 * Time: 11:35 PM */class Translate{    //Database object for easy use    private $database;    public $table_translates = 'translates';    public $table_available_lang = 't_languages';    function __construct() {        //Init New database object        $this->database = new DatabasePDO();    }    public function getAllTranslates() {        $this->database->query("SELECT * FROM $this->table_translates");        $this->database->execute();        return $this->database->resultset();    }    public function getQuery($sql=''){        $this->database->query("$sql");        $this->database->execute();        return $this->database->resultset();    }    public function doQuery($sql=''){        $this->database->query("$sql");        $this->database->execute();        return true;    }    public function getAllTranslatesForLang($lang = 'hebrew') {        $this->database->query("SELECT `name`, `$lang` as `transl` FROM $this->table_translates");        $this->database->execute();        $trans = array();        $res = $this->database->resultset();        foreach ($res as $set) {            $trans[ $set['name'] ] = $set['transl'];        }        return $trans;    }    public function getAllFromTable($table) {        $this->database->query("SELECT * FROM $table");        $this->database->execute();        return $this->database->resultset();    }    public function getSpecifiedFieldsFromTable($table,$fields) {        $this->database->query("SELECT $fields `name`  FROM $table");        $this->database->execute();        return $this->database->resultset();    }    /**     * @return mixed     */    public function getAllLanguages() {        $this->database->query("SELECT * FROM $this->table_available_lang");        $this->database->execute();        return $this->database->resultset();    }    /**     * get active languages for login window     */    public function getAllActiveLanguages($get_only_lang_names = false) {        $this->database->query("SELECT * FROM  $this->table_available_lang WHERE  `status` =  'active'");        $this->database->execute();        $res = $this->database->resultset();        if ($get_only_lang_names) {            foreach ($res as $k => $v){                $res1[] = ucwords($v['column_name']);            }            $res = $res1;        }        return $res;    }    /**     * @param $id     * @return mixed     */    public function getLangSettingsById($id) {        $this->database->query("SELECT * FROM $this->table_available_lang WHERE `id` = :id");        $this->database->bind(":id",$id);        $this->database->execute();        return $this->database->single();    }    /**     * @param $data | array     * @return mixed     */    public function updateLangSettingsById($data) {        $this->database->query("UPDATE $this->table_available_lang SET `name` = :name, `status` = :status WHERE `id`=:id;");        $this->database->bind(":id",$data['id']);        $this->database->bind(":name",$data['name']);        $this->database->bind(":status",$data['status']);        return $this->database->execute();    }    /**     * @param $data | POST     * @return mixed     */    public function addNewLang($data) {        $this->database->query("INSERT INTO $this->table_available_lang (`name`, `column_name`, `status`) VALUES (:name, :column_name, :status);");        $this->database->bind(":name",$data['name']);        $this->database->bind(":column_name",$data['column_name']);        $this->database->bind(":status",$data['status']);        $this->database->execute();        $this->database->query("ALTER TABLE $this->table_translates ADD {$data['column_name']} VARCHAR( 250 ) NULL DEFAULT NULL");        return $this->database->execute();    }    public function addTranslate($name = '',$fiels = '',$value) {        //print_r($value);        $this->database->query("INSERT INTO $this->table_translates (`name`, `hebrew`) VALUES (:name, :value);");        $this->database->bind(":name",$name);        $this->database->bind(":value",$value);        return $this->database->execute();    }    public function updateTranslateField($name = '',$column = 'hebrew',$value = '') {        $this->database->query("UPDATE $this->table_translates SET `$column` = :value WHERE `name`=:name;");        $this->database->bind(":name",$name);        $this->database->bind(":value",$value);        return $this->database->execute();    }    public function getTranslate($name = '') {        $this->database->query("SELECT * FROM $this->table_translates WHERE `name` = :name");        $this->database->bind(":name",$name);        $this->database->execute();        return $this->database->single();    }    public function captionTranslate($caption = '') {        global $lang;        $array = array(            'מחלקה'                  => 'cap_product_group',            'ברקוד'                  => 'barcode',            'דגם'                    => 'num_zar',            'מספר סידורי'            => 'num_serial',            'מספר חליפי'             => 'num_other',            'כמות  מינימלית'         => 'qty_min',            'כמות מקסימלי'           => 'maximum_quantity',            'מיקום'                  => 'admin_template_editor_field_rank',            'ספק'                    => 'supplier',            'עלות'                   => 'cost',            'מחיר מכירה'             => 'saleprice',            'כמות במלאי'             => 'qty_stock',            'תאור'                   => 'desc',            'קוד מט"ח'               => 'currency_code',            'מחיר ל'                 => 'price_for',            'תת יחידה'               => 'sub_unit',            'משקל'                   => 'weight',            'דגם חולצה'              => 'model_shirt',            'צבע'                    => 'color',            'מידה'                   => 'measure',            'הגדרות משתמש'           => 'user_prefs',            'מחלקות'                 => 'product_froup',            'תתי יחידות'             => 'sub_units',            'ספקים'                  => 'suppliers',            'הגדרות יצוא לתוכנה זרה' => 'external_interfaces',            'מאפייני פריט'           => 'item_attrs',            'מטבעות חו"ץ'            => 'product_attributes',            'נקודות מכירה'           => 'stocks_user',            'עמלות'                  => 'commissions',            'לקוח כללי'              => 'general_client',            '2מבצעים'                => 'discounts2',            'מבצעים'                 => 'specials',            'חברות סליקה'            => 'processors',            ''                       => '',        );        return ($lang[ $array[ $caption ] ]) ? $lang[ $array[ $caption ] ] : $caption;        //return $array[$caption];    }    /*public function getTranslate($lang_translate = 'english'){        $this->database->query("SELECT text, $lang_translate as translate  FROM $this->table_translates");        $this->database->execute();        $trans = [];        foreach ($this->database->resultset() as $set){            $trans[$set['text']] = $set['translate'];        }        return $trans;    }*/}